[{"name":"app.R","content":"library(shiny)\r\nlibrary(xml2)\r\nlibrary(DT)\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Test app\"),\r\n  \r\n  verbatimTextOutput(\"connectionStatus\"),\r\n  \r\n  h4(\"Site Data\"),\r\n  DTOutput(\"siteTable\"),\r\n  \r\n  h4(\"Raw Response\"),\r\n  verbatimTextOutput(\"rawResponse\")\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  fetchData <- function() {\r\n    api_url <- \"https://el-086-api.elements360.aem.eco/aem/DataAPI?method=GetSiteMetaData&system_key=6af158e4-53d9-4747-ad67-71197f689e1f&format=xml\"\r\n    \r\n    tryCatch({\r\n      xml_content <- readLines(url(api_url))\r\n      xml_text <- paste(xml_content, collapse = \"\\n\")\r\n      \r\n      return(list(\r\n        status = \"Connected successfully\",\r\n        data = xml_text\r\n      ))\r\n    }, error = function(e) {\r\n      return(list(\r\n        status = paste(\"Error connecting to API:\", e$message),\r\n        data = NULL\r\n      ))\r\n    })\r\n  }\r\n  \r\n  api_data <- reactiveVal(NULL)\r\n  \r\n  observe({\r\n    result <- fetchData()\r\n    api_data(result)\r\n  })\r\n  \r\n  \r\n  output$connectionStatus <- renderText({\r\n    result <- api_data()\r\n    if (is.null(result)) return(\"Connecting...\")\r\n    return(result$status)\r\n  })\r\n  \r\n  # Display raw response\r\n  output$rawResponse <- renderText({\r\n    result <- api_data()\r\n    if (is.null(result) || is.null(result$data)) return(\"No data available\")\r\n    return(result$data)\r\n  })\r\n  \r\n  output$siteTable <- renderDT({\r\n    result <- api_data()\r\n    \r\n    if (is.null(result) || is.null(result$data)) {\r\n      return(datatable(\r\n        data.frame(message = \"No data available. Try refreshing.\"),\r\n        options = list(dom = 't'),\r\n        rownames = FALSE\r\n      ))\r\n    }\r\n    \r\n    xml_data <- tryCatch({\r\n      read_xml(result$data)\r\n    }, error = function(e) {\r\n      NULL\r\n    })\r\n    \r\n    if (is.null(xml_data)) {\r\n      return(datatable(\r\n        data.frame(message = \"Error parsing XML response\"),\r\n        options = list(dom = 't'),\r\n        rownames = FALSE\r\n      ))\r\n    }\r\n    \r\n    rows <- xml_find_all(xml_data, \"//row\")\r\n    \r\n    if (length(rows) == 0) {\r\n      return(datatable(\r\n        data.frame(message = \"No site data found in the response\"),\r\n        options = list(dom = 't'),\r\n        rownames = FALSE\r\n      ))\r\n    }\r\n    \r\n    safe_xml_text <- function(node, xpath) {\r\n      result <- tryCatch({\r\n        node_found <- xml_find_first(node, xpath)\r\n        if (length(node_found) > 0) xml_text(node_found) else NA_character_\r\n      }, error = function(e) {\r\n        NA_character_\r\n      })\r\n      return(result)\r\n    }\r\n    \r\n    site_data <- do.call(rbind, lapply(rows, function(row) {\r\n      data.frame(\r\n        or_site_id = safe_xml_text(row, \"./or_site_id\"),\r\n        site_id = safe_xml_text(row, \"./site_id\"),\r\n        location = safe_xml_text(row, \"./location\"),\r\n        owner = safe_xml_text(row, \"./owner\"),\r\n        system_id = safe_xml_text(row, \"./system_id\"),\r\n        latitude = safe_xml_text(row, \"./latitude_dec\"),\r\n        longitude = safe_xml_text(row, \"./longitude_dec\"),\r\n        elevation = safe_xml_text(row, \"./elevation\"),\r\n        stringsAsFactors = FALSE\r\n      )\r\n    }))\r\n    \r\n    datatable(\r\n      site_data,\r\n      options = list(pageLength = 10, scrollX = TRUE),\r\n      rownames = FALSE\r\n    )\r\n  })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)","type":"text"}]
